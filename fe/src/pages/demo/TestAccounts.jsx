import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import { mockUsers, ROLES, DOCTOR_TYPES } from "../../services/mockData";
import authService from "../../services/authService";
import "../../styles/pages/TestAccounts.scss";

const TestAccounts = () => {
  const navigate = useNavigate();
  const [isLoggingIn, setIsLoggingIn] = useState(false);
  const [loginError, setLoginError] = useState("");

  const handleQuickLogin = async (email, password) => {
    setIsLoggingIn(true);
    setLoginError("");

    try {
      const result = await authService.login(email, password);

      if (result.success) {
        const redirectPath = authService.getRedirectPath();
        navigate(redirectPath);
      } else {
        setLoginError(result.error);
      }
    } catch (error) {
      setLoginError("C√≥ l·ªói x·∫£y ra khi ƒëƒÉng nh·∫≠p");
    } finally {
      setIsLoggingIn(false);
    }
  };

  const getRoleDisplay = (user) => {
    switch (user.role) {
      case ROLES.MEMBER:
        return "Th√†nh vi√™n";
      case ROLES.STAFF_DOCTOR:
        return user.doctorType === DOCTOR_TYPES.BLOOD_DEPARTMENT
          ? "B√°c sƒ© Khoa Huy·∫øt h·ªçc"
          : "B√°c sƒ© Khoa kh√°c";
      case ROLES.STAFF_BLOOD_MANAGER:
        return "Qu·∫£n l√Ω Ng√¢n h√†ng M√°u";
      case ROLES.ADMIN:
        return "Qu·∫£n tr·ªã vi√™n";
      default:
        return "Kh√°ch";
    }
  };

  const getActivitySummary = (user) => {
    if (!user.activityHistory || user.activityHistory.length === 0) {
      return "Ch∆∞a c√≥ ho·∫°t ƒë·ªông";
    }

    const donations = user.activityHistory.filter(
      (a) => a.type === "donation"
    ).length;
    const requests = user.activityHistory.filter(
      (a) => a.type === "request"
    ).length;

    const parts = [];
    if (donations > 0) parts.push(`${donations} l·∫ßn hi·∫øn m√°u`);
    if (requests > 0) parts.push(`${requests} y√™u c·∫ßu m√°u`);

    return parts.join(", ") || "Ch∆∞a c√≥ ho·∫°t ƒë·ªông";
  };

  const groupedUsers = {
    [ROLES.MEMBER]: mockUsers.filter((user) => user.role === ROLES.MEMBER),
    [ROLES.STAFF_DOCTOR]: mockUsers.filter(
      (user) => user.role === ROLES.STAFF_DOCTOR
    ),
    [ROLES.STAFF_BLOOD_MANAGER]: mockUsers.filter(
      (user) => user.role === ROLES.STAFF_BLOOD_MANAGER
    ),
    [ROLES.ADMIN]: mockUsers.filter((user) => user.role === ROLES.ADMIN),
  };

  return (
    <div className="test-accounts">
      <div className="accounts-container">
        <div className="accounts-header">
          <h1>T√†i kho·∫£n test - H·ªá th·ªëng qu·∫£n l√Ω hi·∫øn m√°u</h1>
          <p>
            Ch·ªçn m·ªôt t√†i kho·∫£n ƒë·ªÉ ƒëƒÉng nh·∫≠p nhanh v√† tr·∫£i nghi·ªám c√°c t√≠nh nƒÉng
          </p>
          {loginError && <div className="error-message">{loginError}</div>}
        </div>

        <div className="accounts-sections">
          {/* Members */}
          <div className="account-section">
            <h2>üë• Th√†nh vi√™n (Members)</h2>
            <p className="section-description">
              Th√†nh vi√™n c√≥ th·ªÉ v·ª´a hi·∫øn m√°u v·ª´a y√™u c·∫ßu m√°u. M·ªói th√†nh vi√™n c√≥
              l·ªãch s·ª≠ ho·∫°t ƒë·ªông ri√™ng.
            </p>
            <div className="accounts-grid">
              {groupedUsers[ROLES.MEMBER].map((user) => (
                <div key={user.id} className="account-card">
                  <div className="account-header">
                    <h3>{user.profile.fullName}</h3>
                    <span className="role-badge member">
                      {getRoleDisplay(user)}
                    </span>
                  </div>
                  <div className="account-details">
                    <div className="detail-row">
                      <span className="label">Email:</span>
                      <span>{user.email}</span>
                    </div>
                    <div className="detail-row">
                      <span className="label">M·∫≠t kh·∫©u:</span>
                      <span>{user.password}</span>
                    </div>
                    <div className="detail-row">
                      <span className="label">Nh√≥m m√°u:</span>
                      <span className="blood-type">
                        {user.profile.bloodType}
                      </span>
                    </div>
                    <div className="detail-row">
                      <span className="label">Ho·∫°t ƒë·ªông:</span>
                      <span className="activity-summary">
                        {getActivitySummary(user)}
                      </span>
                    </div>
                  </div>
                  <button
                    className="login-btn"
                    onClick={() => handleQuickLogin(user.email, user.password)}
                    disabled={isLoggingIn}
                  >
                    {isLoggingIn ? "ƒêang ƒëƒÉng nh·∫≠p..." : "ƒêƒÉng nh·∫≠p"}
                  </button>
                </div>
              ))}
            </div>
          </div>

          {/* Doctors */}
          <div className="account-section">
            <h2>üë®‚Äç‚öïÔ∏è B√°c sƒ© (Doctors)</h2>
            <p className="section-description">
              B√°c sƒ© c√≥ th·ªÉ xem v√† x·ª≠ l√Ω c√°c y√™u c·∫ßu m√°u t·ª´ b·ªánh nh√¢n.
            </p>
            <div className="accounts-grid">
              {groupedUsers[ROLES.STAFF_DOCTOR].map((user) => (
                <div key={user.id} className="account-card">
                  <div className="account-header">
                    <h3>{user.profile.fullName}</h3>
                    <span className="role-badge doctor">
                      {getRoleDisplay(user)}
                    </span>
                  </div>
                  <div className="account-details">
                    <div className="detail-row">
                      <span className="label">Email:</span>
                      <span>{user.email}</span>
                    </div>
                    <div className="detail-row">
                      <span className="label">M·∫≠t kh·∫©u:</span>
                      <span>{user.password}</span>
                    </div>
                    <div className="detail-row">
                      <span className="label">Khoa:</span>
                      <span>{user.profile.department}</span>
                    </div>
                    <div className="detail-row">
                      <span className="label">Chuy√™n khoa:</span>
                      <span>{user.profile.specialization}</span>
                    </div>
                  </div>
                  <button
                    className="login-btn"
                    onClick={() => handleQuickLogin(user.email, user.password)}
                    disabled={isLoggingIn}
                  >
                    {isLoggingIn ? "ƒêang ƒëƒÉng nh·∫≠p..." : "ƒêƒÉng nh·∫≠p"}
                  </button>
                </div>
              ))}
            </div>
          </div>

          {/* Managers */}
          <div className="account-section">
            <h2>üëî Qu·∫£n l√Ω (Managers)</h2>
            <p className="section-description">
              Qu·∫£n l√Ω c√≥ th·ªÉ xem t·ªïng quan h·ªá th·ªëng v√† qu·∫£n l√Ω t·∫•t c·∫£ c√°c ho·∫°t
              ƒë·ªông.
            </p>
            <div className="accounts-grid">
              {groupedUsers[ROLES.STAFF_BLOOD_MANAGER].map((user) => (
                <div key={user.id} className="account-card">
                  <div className="account-header">
                    <h3>{user.profile.fullName}</h3>
                    <span className="role-badge manager">
                      {getRoleDisplay(user)}
                    </span>
                  </div>
                  <div className="account-details">
                    <div className="detail-row">
                      <span className="label">Email:</span>
                      <span>{user.email}</span>
                    </div>
                    <div className="detail-row">
                      <span className="label">M·∫≠t kh·∫©u:</span>
                      <span>{user.password}</span>
                    </div>
                    <div className="detail-row">
                      <span className="label">Ph√≤ng ban:</span>
                      <span>{user.profile.department}</span>
                    </div>
                    <div className="detail-row">
                      <span className="label">Ch·ª©c v·ª•:</span>
                      <span>{user.profile.position}</span>
                    </div>
                  </div>
                  <button
                    className="login-btn"
                    onClick={() => handleQuickLogin(user.email, user.password)}
                    disabled={isLoggingIn}
                  >
                    {isLoggingIn ? "ƒêang ƒëƒÉng nh·∫≠p..." : "ƒêƒÉng nh·∫≠p"}
                  </button>
                </div>
              ))}
            </div>
          </div>

          {/* Admins */}
          <div className="account-section">
            <h2>üîß Qu·∫£n tr·ªã vi√™n (Admins)</h2>
            <p className="section-description">
              Qu·∫£n tr·ªã vi√™n c√≥ quy·ªÅn cao nh·∫•t, qu·∫£n l√Ω to√†n b·ªô h·ªá th·ªëng, ng∆∞·ªùi
              d√πng, blog v√† b√°o c√°o.
            </p>
            <div className="accounts-grid">
              {groupedUsers[ROLES.ADMIN].map((user) => (
                <div key={user.id} className="account-card">
                  <div className="account-header">
                    <h3>{user.profile.fullName}</h3>
                    <span className="role-badge admin">
                      {getRoleDisplay(user)}
                    </span>
                  </div>
                  <div className="account-details">
                    <div className="detail-row">
                      <span className="label">Email:</span>
                      <span>{user.email}</span>
                    </div>
                    <div className="detail-row">
                      <span className="label">M·∫≠t kh·∫©u:</span>
                      <span>{user.password}</span>
                    </div>
                    <div className="detail-row">
                      <span className="label">Ph√≤ng ban:</span>
                      <span>{user.profile.department}</span>
                    </div>
                    <div className="detail-row">
                      <span className="label">Ch·ª©c v·ª•:</span>
                      <span>{user.profile.position}</span>
                    </div>
                  </div>
                  <button
                    className="login-btn"
                    onClick={() => handleQuickLogin(user.email, user.password)}
                    disabled={isLoggingIn}
                  >
                    {isLoggingIn ? "ƒêang ƒëƒÉng nh·∫≠p..." : "ƒêƒÉng nh·∫≠p"}
                  </button>
                </div>
              ))}
            </div>
          </div>
        </div>

        <div className="accounts-footer">
          <div className="navigation-buttons">
            <button className="btn btn-outline" onClick={() => navigate("/")}>
              V·ªÅ trang ch·ªß
            </button>
            <button
              className="btn btn-primary"
              onClick={() => navigate("/login")}
            >
              ƒêƒÉng nh·∫≠p th·ªß c√¥ng
            </button>
          </div>

          <div className="info-note">
            <p>
              <strong>L∆∞u √Ω:</strong> ƒê√¢y l√† d·ªØ li·ªáu gi·∫£ ƒë·ªãnh ƒë·ªÉ test giao di·ªán.
              Trong m√¥i tr∆∞·ªùng th·ª±c t·∫ø, d·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c l·∫•y t·ª´ API backend.
            </p>
            <p>
              <strong>Thay ƒë·ªïi:</strong> B√¢y gi·ªù th√†nh vi√™n c√≥ th·ªÉ v·ª´a hi·∫øn m√°u
              v·ª´a y√™u c·∫ßu m√°u. L·ªãch s·ª≠ ho·∫°t ƒë·ªông ƒë∆∞·ª£c l∆∞u tr·ªØ trong avatar
              dropdown menu.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default TestAccounts;
