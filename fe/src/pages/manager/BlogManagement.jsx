import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import ManagerSidebar from "../../components/manager/ManagerSidebar";
import blogService from "../../services/blogService";
import authService from "../../services/authService";
import "../../styles/pages/BlogManagement.scss";

const ManagerBlogManagement = () => {
  const navigate = useNavigate();
  const [blogs, setBlogs] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState("");
  const [statusFilter, setStatusFilter] = useState("all");
  const [categoryFilter, setCategoryFilter] = useState("all");

  useEffect(() => {
    loadBlogs();
  }, []);

  const loadBlogs = async () => {
    try {
      setLoading(true);
      const currentUser = authService.getCurrentUser();
      const response = await blogService.getBlogsByAuthor(currentUser.id);
      
      if (response.success) {
        setBlogs(response.data);
      } else {
        console.error('Failed to load blogs:', response.message);
      }
    } catch (error) {
      console.error('Error loading blogs:', error);
    } finally {
      setLoading(false);
    }
  };

  const filteredBlogs = blogs.filter((blog) => {
    const matchesSearch =
      blog.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      blog.excerpt.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesStatus = statusFilter === "all" || blog.status === statusFilter;
    const matchesCategory = categoryFilter === "all" || blog.category === categoryFilter;

    return matchesSearch && matchesStatus && matchesCategory;
  });

  const getStatusBadge = (status) => {
    const statusConfig = {
      published: { label: "ƒê√£ ƒëƒÉng", class: "status-published" },
      draft: { label: "B·∫£n nh√°p", class: "status-draft" },
    };

    const config = statusConfig[status] || statusConfig.draft;
    return (
      <span className={`status-badge ${config.class}`}>{config.label}</span>
    );
  };

  const handleCreateBlog = () => {
    navigate("/manager/blog/create");
  };

  const handleEditBlog = (blogId) => {
    navigate(`/manager/blog/edit/${blogId}`);
  };

  const handleDeleteBlog = async (blogId) => {
    if (window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a b√†i vi·∫øt n√†y?")) {
      try {
        const response = await blogService.deleteBlog(blogId);
        if (response.success) {
          setBlogs(blogs.filter(blog => blog.id !== blogId));
          alert("X√≥a b√†i vi·∫øt th√†nh c√¥ng!");
        } else {
          alert("L·ªói: " + response.message);
        }
      } catch (error) {
        console.error('Error deleting blog:', error);
        alert("C√≥ l·ªói x·∫£y ra khi x√≥a b√†i vi·∫øt!");
      }
    }
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString("vi-VN");
  };

  if (loading) {
    return (
      <div className="manager-layout">
        <ManagerSidebar />
        <div className="manager-content">
          <div className="loading-container">
            <div className="loading-spinner"></div>
            <p>ƒêang t·∫£i d·ªØ li·ªáu...</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="manager-layout">
      <ManagerSidebar />
      <div className="manager-content">
        <div className="blog-management">
          <div className="page-header">
            <div className="header-content">
              <h1>Qu·∫£n l√Ω Blog</h1>
              <p>T·∫°o v√† qu·∫£n l√Ω Tin t·ª©c & Th√¥ng b√°o n·ªôi b·ªô (kh√¥ng ƒë∆∞·ª£c ƒëƒÉng T√†i li·ªáu)</p>
            </div>
            <button className="btn-primary" onClick={handleCreateBlog}>
              <i className="fas fa-plus"></i>
              T·∫°o b√†i vi·∫øt m·ªõi
            </button>
          </div>

          <div className="filters-section">
            <div className="search-box">
              <i className="fas fa-search"></i>
              <input
                type="text"
                placeholder="T√¨m ki·∫øm b√†i vi·∫øt..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>

            <div className="filter-controls">
              <select
                value={statusFilter}
                onChange={(e) => setStatusFilter(e.target.value)}
                className="filter-select"
              >
                <option value="all">T·∫•t c·∫£ tr·∫°ng th√°i</option>
                <option value="published">ƒê√£ ƒëƒÉng</option>
                <option value="draft">B·∫£n nh√°p</option>
              </select>

              <select
                value={categoryFilter}
                onChange={(e) => setCategoryFilter(e.target.value)}
                className="filter-select"
              >
                <option value="all">T·∫•t c·∫£ danh m·ª•c</option>
                <option value="Tin t·ª©c">Tin t·ª©c (Hi·ªÉn th·ªã c√¥ng khai)</option>
                <option value="Th√¥ng b√°o">Th√¥ng b√°o n·ªôi b·ªô</option>
              </select>
            </div>
          </div>

          <div className="blogs-grid">
            {filteredBlogs.length === 0 ? (
              <div className="empty-state">
                <i className="fas fa-blog"></i>
                <h3>Ch∆∞a c√≥ b√†i vi·∫øt n√†o</h3>
                <p>H√£y t·∫°o b√†i vi·∫øt ƒë·∫ßu ti√™n ƒë·ªÉ chia s·∫ª tin t·ª©c ho·∫∑c th√¥ng b√°o</p>
                <button className="btn-primary" onClick={handleCreateBlog}>
                  T·∫°o b√†i vi·∫øt m·ªõi
                </button>
              </div>
            ) : (
              filteredBlogs.map((blog) => (
                <div key={blog.id} className="blog-card">
                  <div className="blog-header">
                    <div className="blog-meta">
                      <span className="category">{blog.category}</span>
                      {getStatusBadge(blog.status)}
                    </div>
                    <div className="blog-actions">
                      <button
                        className="action-btn edit"
                        onClick={() => handleEditBlog(blog.id)}
                        title="Ch·ªânh s·ª≠a"
                      >
                        <i className="fas fa-edit"></i>
                      </button>
                      <button
                        className="action-btn delete"
                        onClick={() => handleDeleteBlog(blog.id)}
                        title="X√≥a"
                      >
                        <i className="fas fa-trash"></i>
                      </button>
                    </div>
                  </div>

                  <div className="blog-content">
                    <h3 className="blog-title">{blog.title}</h3>
                    <p className="blog-excerpt">{blog.excerpt}</p>
                    
                    <div className="blog-stats">
                      <span className="stat">üìÖ {formatDate(blog.createdAt)}</span>
                      <span className="stat">üëÅÔ∏è {blog.views || 0} l∆∞·ª£t xem</span>
                      <span className="stat">‚ù§Ô∏è {blog.likes || 0} l∆∞·ª£t th√≠ch</span>
                    </div>
                  </div>
                </div>
              ))
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default ManagerBlogManagement;
